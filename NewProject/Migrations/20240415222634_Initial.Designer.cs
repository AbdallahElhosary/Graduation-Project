// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewProject.Data;

#nullable disable

namespace NewProject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240415222634_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NewProject.Models.AcceptedItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("Num")
                        .HasColumnType("int");

                    b.Property<int>("StepnItemId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("StepnItemId")
                        .IsUnique();

                    b.ToTable("AcceptedItems");
                });

            modelBuilder.Entity("NewProject.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ahmed Mohamed",
                            Password = "Ahmed000@111"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ahmed Shapaan",
                            Password = "Ahmed000@111"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ahmed Tamer",
                            Password = "Ahmed000@111"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Safwa Mohamed",
                            Password = "Safwa000@111"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sohila Amr",
                            Password = "Sohila000@111"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Yasmine Abdelrhman",
                            Password = "Yasmine000@111"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Zaid Adel",
                            Password = "Zaid000@111"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Amal Sabry",
                            Password = "Amal000@111"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Tarek Elsheshtawy",
                            Password = "Tarek000@111"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Amainy Saaed",
                            Password = "Amainy000@111"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Fady Fady",
                            Password = "Fady000@111"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Mohamed Abdelfataah",
                            Password = "Mohamed000@111"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Karam Karam",
                            Password = "Ahmed000@111"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Ahmed Shalaby",
                            Password = "Ahmed000@111"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Ahmed Taha",
                            Password = "Ahmed000@111"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Mahmmud Ghonam"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Rayan Ghonam"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Yousef Hiatham"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Ahmed Hosny"
                        });
                });

            modelBuilder.Entity("NewProject.Models.NeededItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InitialPrice")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TenderId");

                    b.ToTable("NeededItems");
                });

            modelBuilder.Entity("NewProject.Models.Offer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("VendorId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("NewProject.Models.SelectionCommittee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenderId")
                        .IsUnique();

                    b.ToTable("SelectionCommittees");
                });

            modelBuilder.Entity("NewProject.Models.SelectionCommitteeMember", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("SelectionCommitteeId")
                        .HasColumnType("int");

                    b.HasKey("MemberId", "SelectionCommitteeId");

                    b.HasIndex("SelectionCommitteeId");

                    b.ToTable("SelectionCommitteeMembers");
                });

            modelBuilder.Entity("NewProject.Models.SpecifictionCommittee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenderId")
                        .IsUnique();

                    b.ToTable("SpecifictionCommittees");
                });

            modelBuilder.Entity("NewProject.Models.SpecifictionCommitteeMember", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("SpecifictionCommitteeId")
                        .HasColumnType("int");

                    b.HasKey("MemberId", "SpecifictionCommitteeId");

                    b.HasIndex("SpecifictionCommitteeId");

                    b.ToTable("SpecifictionCommitteeMembers");
                });

            modelBuilder.Entity("NewProject.Models.StepnItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValidItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("ValidItemId");

                    b.ToTable("StepnItems");
                });

            modelBuilder.Entity("NewProject.Models.TechnicalCommittee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenderId")
                        .IsUnique();

                    b.ToTable("TechnicalCommittees");
                });

            modelBuilder.Entity("NewProject.Models.TechnicalCommitteeMember", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("TechnicalCommitteeId")
                        .HasColumnType("int");

                    b.HasKey("MemberId", "TechnicalCommitteeId");

                    b.HasIndex("TechnicalCommitteeId");

                    b.ToTable("TechnicalCommitteeMembers");
                });

            modelBuilder.Entity("NewProject.Models.Tender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateOnly")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tenders");
                });

            modelBuilder.Entity("NewProject.Models.ValidItem", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("NeededItemId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("NeededItemId");

                    b.ToTable("ValidItems");
                });

            modelBuilder.Entity("NewProject.Models.ValidItemOffer", b =>
                {
                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("ValidItemId")
                        .HasColumnType("int");

                    b.HasKey("OfferId", "ValidItemId");

                    b.HasIndex("ValidItemId");

                    b.ToTable("ValidItemOffers");
                });

            modelBuilder.Entity("NewProject.Models.Vendor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Vendors");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Name = "Ahmed Shapaan"
                        },
                        new
                        {
                            id = 2,
                            Name = "Safwa Mohamed"
                        },
                        new
                        {
                            id = 3,
                            Name = "Ahmed Mohamed"
                        },
                        new
                        {
                            id = 4,
                            Name = "Sohila Amr"
                        },
                        new
                        {
                            id = 5,
                            Name = "Amal Sabry"
                        },
                        new
                        {
                            id = 6,
                            Name = "Yasmine Abdelrhman"
                        },
                        new
                        {
                            id = 7,
                            Name = "Ahmed Ramadan"
                        },
                        new
                        {
                            id = 8,
                            Name = "Zaid Adel"
                        });
                });

            modelBuilder.Entity("NewProject.Models.AcceptedItem", b =>
                {
                    b.HasOne("NewProject.Models.StepnItem", "StepnItem")
                        .WithOne("AcceptedItem")
                        .HasForeignKey("NewProject.Models.AcceptedItem", "StepnItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StepnItem");
                });

            modelBuilder.Entity("NewProject.Models.NeededItem", b =>
                {
                    b.HasOne("NewProject.Models.Tender", "Tender")
                        .WithMany("RequiredItems")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("NewProject.Models.Offer", b =>
                {
                    b.HasOne("NewProject.Models.Vendor", "Vendor")
                        .WithMany("offers")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("NewProject.Models.SelectionCommittee", b =>
                {
                    b.HasOne("NewProject.Models.Tender", "Tender")
                        .WithOne("selectionCommittee")
                        .HasForeignKey("NewProject.Models.SelectionCommittee", "TenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("NewProject.Models.SelectionCommitteeMember", b =>
                {
                    b.HasOne("NewProject.Models.Member", "Member")
                        .WithMany("selectionCommitteeMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewProject.Models.SelectionCommittee", "SelectionCommittee")
                        .WithMany("Members")
                        .HasForeignKey("SelectionCommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("SelectionCommittee");
                });

            modelBuilder.Entity("NewProject.Models.SpecifictionCommittee", b =>
                {
                    b.HasOne("NewProject.Models.Tender", "Tender")
                        .WithOne("SpecifictionCommittee")
                        .HasForeignKey("NewProject.Models.SpecifictionCommittee", "TenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("NewProject.Models.SpecifictionCommitteeMember", b =>
                {
                    b.HasOne("NewProject.Models.Member", "Member")
                        .WithMany("specifictionCommitteeMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewProject.Models.SpecifictionCommittee", "SpecifictionCommittee")
                        .WithMany("Members")
                        .HasForeignKey("SpecifictionCommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("SpecifictionCommittee");
                });

            modelBuilder.Entity("NewProject.Models.StepnItem", b =>
                {
                    b.HasOne("NewProject.Models.Offer", "Offer")
                        .WithMany("StepnItems")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewProject.Models.ValidItem", "ValidItem")
                        .WithMany("StepnItems")
                        .HasForeignKey("ValidItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("ValidItem");
                });

            modelBuilder.Entity("NewProject.Models.TechnicalCommittee", b =>
                {
                    b.HasOne("NewProject.Models.Tender", "Tender")
                        .WithOne("TechnicalCommittee")
                        .HasForeignKey("NewProject.Models.TechnicalCommittee", "TenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("NewProject.Models.TechnicalCommitteeMember", b =>
                {
                    b.HasOne("NewProject.Models.Member", "Member")
                        .WithMany("technicalCommitteeMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewProject.Models.TechnicalCommittee", "TechnicalCommittee")
                        .WithMany("Members")
                        .HasForeignKey("TechnicalCommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("TechnicalCommittee");
                });

            modelBuilder.Entity("NewProject.Models.ValidItem", b =>
                {
                    b.HasOne("NewProject.Models.NeededItem", "NeededItem")
                        .WithMany()
                        .HasForeignKey("NeededItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NeededItem");
                });

            modelBuilder.Entity("NewProject.Models.ValidItemOffer", b =>
                {
                    b.HasOne("NewProject.Models.Offer", "Offer")
                        .WithMany("ValidItems")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewProject.Models.ValidItem", "ValidItem")
                        .WithMany("offers")
                        .HasForeignKey("ValidItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("ValidItem");
                });

            modelBuilder.Entity("NewProject.Models.Member", b =>
                {
                    b.Navigation("selectionCommitteeMembers");

                    b.Navigation("specifictionCommitteeMembers");

                    b.Navigation("technicalCommitteeMembers");
                });

            modelBuilder.Entity("NewProject.Models.Offer", b =>
                {
                    b.Navigation("StepnItems");

                    b.Navigation("ValidItems");
                });

            modelBuilder.Entity("NewProject.Models.SelectionCommittee", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("NewProject.Models.SpecifictionCommittee", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("NewProject.Models.StepnItem", b =>
                {
                    b.Navigation("AcceptedItem")
                        .IsRequired();
                });

            modelBuilder.Entity("NewProject.Models.TechnicalCommittee", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("NewProject.Models.Tender", b =>
                {
                    b.Navigation("RequiredItems");

                    b.Navigation("SpecifictionCommittee");

                    b.Navigation("TechnicalCommittee");

                    b.Navigation("selectionCommittee");
                });

            modelBuilder.Entity("NewProject.Models.ValidItem", b =>
                {
                    b.Navigation("StepnItems");

                    b.Navigation("offers");
                });

            modelBuilder.Entity("NewProject.Models.Vendor", b =>
                {
                    b.Navigation("offers");
                });
#pragma warning restore 612, 618
        }
    }
}
